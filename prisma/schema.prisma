generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  relationMode = "foreignKeys"
}

model User {
  id                   String         @id @default(uuid())
  email                String         @unique
  password             String?        // Made optional for passwordless users
  firstName            String
  lastName             String
  department           String?
  role                 Role           @default(user)
  passwordResetRequired Boolean        @default(false)
  resetToken           String?        // Password reset token
  resetTokenExpires    DateTime?      // Reset token expiration
  emailVerified        DateTime?      // Email verification timestamp
  image                String?        // Profile image URL
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  vacationDays         Int            @default(20)  // Annual leave balance in days
  sickDays            Int            @default(10)  // Sick leave balance in days
  
  // Passwordless authentication relations
  sessions             Session[]      // For session management
  accounts             Account[]      // OAuth accounts
  verificationTokens   VerificationToken[]  // Magic link tokens
  authenticators       Authenticator[]      // WebAuthn credentials
  leaveRequests        LeaveRequest[]

  @@map("users")
}

// NextAuth.js required models for passwordless authentication
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String   // Email for magic links
  token      String   @unique
  expires    DateTime
  userId     String?  // Optional user reference for magic links
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// WebAuthn / Passkey support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  Bytes
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map("authenticators")
}

model LeaveRequest {
  id            String      @id @default(uuid())
  userId        String
  type          LeaveType
  startDate     DateTime
  endDate       DateTime
  reason        String?
  status        LeaveStatus @default(Pending)
  daysRequested Int     @map("days_requested")
  requestedAt   DateTime    @default(now())
  reviewedAt    DateTime?
  reviewedBy    String?
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("leave_requests")
}

enum Role {
  admin
  user
}

enum LeaveType {
  Annual
  Sick
  Unpaid
  Other
}

enum LeaveStatus {
  Pending
  Approved
  Rejected
}
